import telebot
from telebot import types
import sqlite3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7576662427:AAGso4U9daybsZqD92Y77dtJJypFeYVkEko')


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('workmatch.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users 
                 (id INTEGER PRIMARY KEY, user_id INTEGER, role TEXT, rating REAL DEFAULT 0.0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS tasks 
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, employer_id INTEGER, 
                 title TEXT, description TEXT, price REAL, category TEXT, status TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS applications 
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, task_id INTEGER, student_id INTEGER)''')
    conn.commit()
    conn.close()


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üë®‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç")
    btn2 = types.KeyboardButton("üë©‚Äçüíº –Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å")
    markup.add(btn1, btn2)
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkMatch!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(content_types=['text'])
def handle_text(message):
    conn = sqlite3.connect('workmatch.db')
    c = conn.cursor()

    if message.text == "üë®‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç":
        c.execute("INSERT OR REPLACE INTO users (user_id, role) VALUES (?, ?)",
                  (message.from_user.id, "student"))
        conn.commit()
        show_student_menu(message)
    elif message.text == "üë©‚Äçüíº –Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å":
        c.execute("INSERT OR REPLACE INTO users (user_id, role) VALUES (?, ?)",
                  (message.from_user.id, "employer"))
        conn.commit()
        show_employer_menu(message)
    elif message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        create_task(message)
    elif message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        show_profile(message)
    elif message.text == "üìã –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ":
        find_task(message)
    elif message.text in ["–î–æ—Å—Ç–∞–≤–∫–∞", "–û–Ω–ª–∞–π–Ω-–∑–∞–¥–∞—á–∞", "–ü–æ–º–æ—â–Ω–∏–∫", "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"]:
        show_tasks(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")

    conn.close()


# –ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
def show_student_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìã –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ")
    btn2 = types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=markup)


# –ú–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
def show_employer_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    btn2 = types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–ú–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:", reply_markup=markup)


# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
def create_task(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_task_title)


def process_task_title(message):
    task = {'title': message.text}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_task_description, task)


def process_task_description(message, task):
    task['description'] = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
    bot.register_next_step_handler(msg, process_task_price, task)


def process_task_price(message, task):
    try:
        task['price'] = float(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞")
        btn2 = types.KeyboardButton("–û–Ω–ª–∞–π–Ω-–∑–∞–¥–∞—á–∞")
        btn3 = types.KeyboardButton("–ü–æ–º–æ—â–Ω–∏–∫")
        markup.add(btn1, btn2, btn3)
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_task_category, task)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")


def process_task_category(message, task):
    task['category'] = message.text
    conn = sqlite3.connect('workmatch.db')
    c = conn.cursor()
    c.execute("INSERT INTO tasks (employer_id, title, description, price, category, status) VALUES (?, ?, ?, ?, ?, ?)",
              (message.from_user.id, task['title'], task['description'], task['price'], task['category'], 'active'))
    conn.commit()
    conn.close()
    show_employer_menu(message)
    bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")


# –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π
def find_task(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞")
    btn2 = types.KeyboardButton("–û–Ω–ª–∞–π–Ω-–∑–∞–¥–∞—á–∞")
    btn3 = types.KeyboardButton("–ü–æ–º–æ—â–Ω–∏–∫")
    btn4 = types.KeyboardButton("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


def show_tasks(message):
    conn = sqlite3.connect('workmatch.db')
    c = conn.cursor()

    category = message.text if message.text != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" else None
    if category:
        c.execute("SELECT * FROM tasks WHERE status='active' AND category=?", (category,))
    else:
        c.execute("SELECT * FROM tasks WHERE status='active'")

    tasks = c.fetchall()
    conn.close()

    if tasks:
        for task in tasks:
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{task[0]}")
            markup.add(btn)
            bot.send_message(message.chat.id,
                             f"üìå {task[2]}\nüìù {task[3]}\nüí∞ {task[4]} —Ä—É–±.\nüè∑ {task[5]}",
                             reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç")
    show_student_menu(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('apply_'))
def apply_task(call):
    task_id = int(call.data.split('_')[1])
    student_id = call.from_user.id

    conn = sqlite3.connect('workmatch.db')
    c = conn.cursor()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ applications
    c.execute("INSERT INTO applications (task_id, student_id) VALUES (?, ?)", (task_id, student_id))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ
    c.execute("SELECT employer_id, title FROM tasks WHERE id=?", (task_id,))
    task = c.fetchone()
    employer_id = task[0]
    task_title = task[1]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
    c.execute("SELECT rating FROM users WHERE user_id=?", (student_id,))
    student = c.fetchone()
    student_rating = student[0] if student else 0.0

    conn.commit()
    conn.close()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ!")
    bot.answer_callback_query(call.id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
    try:
        student_link = f"tg://user?id={student_id}"
        employer_message = (
            f"–ö—Ç–æ-—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ: '{task_title}'\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: @{call.from_user.username if call.from_user.username else '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            f"ID —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_id}\n"
            f"–†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_rating}\n"
            f"[–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–º]({student_link})"
        )
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É", callback_data=f"contact_{student_id}_{task_id}")
        markup.add(btn)
        bot.send_message(employer_id, employer_message, parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith('contact_'))
def contact_student(call):
    data = call.data.split('_')
    student_id = int(data[1])
    task_id = int(data[2])

    bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(call.message, send_message_to_student, student_id, task_id)


def send_message_to_student(message, student_id, task_id):
    conn = sqlite3.connect('workmatch.db')
    c = conn.cursor()
    c.execute("SELECT title FROM tasks WHERE id=?", (task_id,))
    task = c.fetchone()
    task_title = task[0] if task else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
    conn.close()

    employer_message = f"–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é '{task_title}':\n{message.text}"
    try:
        bot.send_message(student_id, employer_message)
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É!")
    except Exception as e:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    show_employer_menu(message)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
def show_profile(message):
    conn = sqlite3.connect('workmatch.db')
    c = conn.cursor()
    c.execute("SELECT role, rating FROM users WHERE user_id=?", (message.from_user.id,))
    user = c.fetchone()
    conn.close()

    if user:
        role = "–°—Ç—É–¥–µ–Ω—Ç" if user[0] == "student" else "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å"
        bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ä–æ–ª—å: {role}\n–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {user[1]}")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if user and user[0] == "employer":
        show_employer_menu(message)
    elif user and user[0] == "student":
        show_student_menu(message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    bot.polling(none_stop=True)
